# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P8huJ6AwCaUJ37uWtTKJMcKnIXWUFkfm
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

from google.colab import files
uploaded=files.upload()

import zipfile
import pandas as pd
zip_file_path = "IMDb Movies India.csv.zip"
with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
    zip_ref.extractall("./")


csv_file_path = "IMDb Movies India.csv"
try:
    data = pd.read_csv(csv_file_path, encoding='utf-8')
except UnicodeDecodeError:
    data = pd.read_csv(csv_file_path, encoding='ISO-8859-1')

print("First 5 rows of the dataset:")
print(data.head())

print("Last 5 rows of the dataset:")
print(data.tail())

print("\nSummary of the dataset:")
print(data.info())

print("\nMissing values in each column:")
print(data.isnull().sum())

if "rating" in data.columns:

    top_rated_movies = data.sort_values(by="rating", ascending=False).head(10)
    print("\nTop 10 highest-rated movies:")
    print(top_rated_movies[["title", "rating"]])

    # Distribution of ratings
    plt.figure(figsize=(10, 6))
    sns.histplot(data["rating"], bins=20, kde=True, color="blue")
    plt.title("Distribution of Movie Ratings")
    plt.xlabel("Rating")
    plt.ylabel("Frequency")
    plt.show()

    # Average rating per genre
    if "genre" in data.columns:
        avg_rating_per_genre = data.groupby("genre")["rating"].mean().sort_values(ascending=False)
        print("\nAverage rating per genre:")
        print(avg_rating_per_genre)

        # Plot average rating per genre
        plt.figure(figsize=(12, 6))
        avg_rating_per_genre.plot(kind="bar", color="orange")
        plt.title("Average Rating per Genre")
        plt.xlabel("Genre")
        plt.ylabel("Average Rating")
        plt.xticks(rotation=45)
        plt.show()
    else:
        print("\n'genre' column not found in the dataset.")
else:
    print("\n'rating' column not found in the dataset.")

print(data.dtypes)

print(data)

data.info()

"""**DATA VISUALIZATION**"""

csv_file_path = "IMDb Movies India.csv"
try:
    data = pd.read_csv(csv_file_path, encoding='utf-8')
except UnicodeDecodeError:
    data = pd.read_csv(csv_file_path, encoding='ISO-8859-1')


if 'Year' in data.columns:
    plt.figure(figsize=(10, 6))
    sns.histplot(data['Year'], bins=30, kde=False, color='skyblue')
    plt.title('Distribution of Movie Release Years')
    plt.xlabel('Year')
    plt.ylabel('Number of Movies')
    plt.show()
else:
    print("'Year' column not found in the dataset.")



if 'Votes' in data.columns:
    try:
      data['Votes'] = pd.to_numeric(data['Votes'], errors='coerce')
      data.dropna(subset=['Votes'], inplace=True)
      plt.figure(figsize=(10, 6))
      sns.histplot(data['Votes'], bins=30, kde=False, color='salmon')
      plt.title('Distribution of Movie Votes')
      plt.xlabel('Number of Votes')
      plt.ylabel('Number of Movies')
      plt.yscale('log')
      plt.show()
    except (ValueError, TypeError):
      print("'Votes' column could not be converted to numeric type.  Check for non-numeric values")
else:
    print("'Votes' column not found in the dataset.")

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

csv_file_path = "IMDb Movies India.csv"

try:
    data = pd.read_csv(csv_file_path, encoding='utf-8')
except UnicodeDecodeError:
    data = pd.read_csv(csv_file_path, encoding='ISO-8859-1')


if 'Genre' in data.columns:
    genre_counts = data['Genre'].value_counts()

    plt.figure(figsize=(8, 8))
    plt.pie(genre_counts, labels=genre_counts.index, autopct='%1.1f%%', colors=sns.color_palette("Set3", len(genre_counts)))
    plt.title('Distribution of Movie Genres')
    plt.show()
else:
    print("'Genre' column not found in the dataset.")



import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

csv_file_path = "IMDb Movies India.csv"

try:
    data = pd.read_csv(csv_file_path, encoding='utf-8')
except UnicodeDecodeError:
    data = pd.read_csv(csv_file_path, encoding='ISO-8859-1')

if 'Year' in data.columns:
    movie_counts_per_year = data['Year'].value_counts().sort_index()

    plt.figure(figsize=(10, 6))
    plt.plot(movie_counts_per_year.index, movie_counts_per_year.values, marker='o', color='teal')
    plt.title('Number of Movies Released Per Year')
    plt.xlabel('Year')
    plt.ylabel('Number of Movies')
    plt.grid(True)
    plt.show()
else:
    print("'Year' column not found in the dataset.")

""" **SPLITTING DATA**"""

from sklearn.model_selection import train_test_split

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

csv_file_path = "IMDb Movies India.csv"

try:
    data = pd.read_csv(csv_file_path, encoding='utf-8')
except UnicodeDecodeError:
    data = pd.read_csv(csv_file_path, encoding='ISO-8859-1')

df = data.drop(['Name', 'Genre', 'Rating'], axis=1)

output = data['Rating']


print(df.head())
print(output.head())

"""**Model**"""

!pip install catboost

pip install catboost

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.metrics import mean_squared_error, r2_score
from xgboost import XGBRegressor
from lightgbm import LGBMRegressor
from catboost import CatBoostRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor

csv_file_path = "IMDb Movies India.csv"

try:
    data = pd.read_csv(csv_file_path, encoding='utf-8')
except UnicodeDecodeError:
    data = pd.read_csv(csv_file_path, encoding='ISO-8859-1')


data['Votes'] = pd.to_numeric(data['Votes'], errors='coerce')
data.dropna(subset=['Votes', 'Rating'], inplace=True)

data['Year'] = data['Year'].astype(str).str.extract('(\d{4})').astype(float)


features = ['Year', 'Votes']
X = data[features]
y = data['Rating']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


models = {
    'Linear Regression': LinearRegression(),
    'Random Forest': RandomForestRegressor(),
    'Gradient Boosting': GradientBoostingRegressor(),
    'Extended Gradient Boosting': XGBRegressor(),
    'Light Gradient Boosting': LGBMRegressor(),
    'Cat Boosting': CatBoostRegressor(silent=True),
    'K Nearest Neighbors': KNeighborsRegressor(),
    'Decision Tree': DecisionTreeRegressor()
}


model_results = {}

for idx, (name, model) in enumerate(models.items()):
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    model_results[name] = mse

